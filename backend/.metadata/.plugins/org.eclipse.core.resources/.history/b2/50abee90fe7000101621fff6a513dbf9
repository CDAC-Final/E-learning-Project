package com.elearning.backend.service;

import com.elearning.backend.dto.AuthResponseDTO;
import com.elearning.backend.dto.LoginRequestDTO;
import com.elearning.backend.security.JwtService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Service;

@Service
@RequiredArgsConstructor
@Slf4j
public class AuthService {

    private final AuthenticationManager authenticationManager;
    private final CustomUserDetailsService userDetailsService;
    private final JwtService jwtService;

    public AuthResponseDTO login(LoginRequestDTO loginRequest) {
        // Step 1: Authenticate user
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(
                        loginRequest.getEmail(),
                        loginRequest.getPassword()
                )
        );

        log.info("User authenticated: {}", loginRequest.getEmail());

        // Step 2: Load UserDetails
        CustomUserDetails userDetails = (CustomUserDetails) userDetailsService
                .loadUserByUsername(loginRequest.getEmail());

        // Step 3: Generate JWT
        String token = jwtService.generateToken(userDetails);

        log.info("Generated JWT for user {}: {}", loginRequest.getEmail(), token);

        // Step 4: Return DTO with token + extra data
        return new AuthResponseDTO(
                token,
                userDetails.getUser().getRole().name(),
                userDetails.getUser().getEmail()
        );
    }
}
