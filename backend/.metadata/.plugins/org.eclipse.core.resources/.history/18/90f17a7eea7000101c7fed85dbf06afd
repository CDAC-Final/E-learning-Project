package com.elearning.backend.security;

import java.security.Key;
import java.util.Date;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.JwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;

@Component
public class JwtUtil {

	private final String SECRET = "mySecretKeymySecretKeymySecretKey";
	private final long EXPIRATION_TIME = 1000 * 60 * 60 * 60;
	private final Key key = Keys.hmacShaKeyFor(SECRET.getBytes());

	// Genrating the token

	public String generateToken(UserDetails userDetails) {
		return Jwts.builder().setSubject(username).setIssuedAt(new Date())
				.setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
				.signWith(key, SignatureAlgorithm.HS256).compact();

	}

	public String extractUsername(String token) {
		return Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token).getBody().getSubject();
	}

	// Validate token
	public boolean validateToken(String token, String username) {
		try {
			String tokenUsername = extractUsername(token);
			return tokenUsername.equals(username) && !isTokenExpired(token);
		} catch (JwtException e) {
			return false;
		}
	}

	// Check if token is expired
	public boolean isTokenExpired(String token) {
		Date expiration = Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token).getBody()
				.getExpiration();
		return expiration.before(new Date());
	}
}
